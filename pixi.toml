[project]
authors = ["Olivier Roussel <olivier.roussel@inria.fr>"]
channels = ["conda-forge"]
description = "Real-time multi-physics simulation with an emphasis on medical simulation"
name = "sofa"
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]
version = "25.06.99"
license = "LGPL-2.1-or-later"
license-file = "LICENSE-LGPL.md"

# TODO: add ccache support
[build-dependencies]
cmake = ">=3.22"
cxx-compiler = ">=1.7.0"
ninja = ">=1.11"
pkg-config = "*"
git = ">=2.47.0"


[dependencies]
libboost-headers = ">=1.76.0"
zlib = ">=1.2.11"
eigen = ">=3.4.0"
tinyxml2 = ">=9.0.0"
cxxopts = ">=3.1.1"
gtest = "*"

[activation]
scripts = ["development/scripts/pixi/activation.sh"]

[target.win-64.activation]
scripts = ["development/scripts/pixi/activation.bat"]

# TODO : SOFA_ENABLE_LEGACY_HEADERS deprecated ?
# TODO : APPLICATION_GETDEPRECATEDCOMPONENTS ?
# TODO : SOFA_BUILD_APP_BUNDLE ?
# TODO : SOFA_WITH_DEPRECATED_COMPONENTS ?
# TODO : SOFA_GUI_QT_ENABLE_QDOCBROWSER ?
# TODO : SOFAGUIQT_ENABLE_NODEGRAPH ?
# TODO : PLUGIN_EXTERNALBEHAVIORMODEL ?

[tasks]
configure = { cmd = [
  "cmake",
  "-G",
  "Ninja",
  "-B",
  "build",
  "-S",
  ".",
  "-DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX",
  "-DCMAKE_BUILD_TYPE=$SOFA_BUILD_TYPE",
  "-DSOFA_BUILD_APP_BUNDLE=OFF",
  "-DSOFA_ENABLE_LEGACY_HEADERS=ON",
  "-DSOFA_ALLOW_FETCH_DEPENDENCIES=ON",
  "-DSOFA_BUILD_TESTS=ON",
  "-DSOFA_FLOATING_POINT_TYPE=double",
  "-DPLUGIN_SOFAMATRIX=$SOFA_PLUGIN_SOFAMATRIX",
  "-DAPPLICATION_SOFAPHYSICSAPI=$SOFA_APPLICATION_SOFAPHYSICSAPI",
  "-DAPPLICATION_SOFAINFO=$SOFA_APPLICATION_SOFAINFO",
  "-DSOFA_BUILD_SCENECREATOR=$SOFA_BUILD_SCENECREATOR",
  "-DSOFA_BUILD_TUTORIALS=$SOFA_BUILD_TUTORIALS",
  "-DSOFA_DUMP_VISITOR_INFO=$SOFA_DUMP_VISITOR_INFO",
  "-DPLUGIN_SOFA_GUI_QT=$SOFA_PLUGIN_SOFA_GUI_QT",
  "-DSOFA_NO_OPENGL=$SOFA_NO_OPENGL",
  "-DSOFA_WITH_OPENGL=$SOFA_WITH_OPENGL",
  "-DSOFA_WITH_DEVTOOLS=$SOFA_WITH_DEVTOOLS",
  "-DSOFA_BUILD_RELEASE_PACKAGE=$SOFA_BUILD_RELEASE_PACKAGE",
  "-DPLUGIN_CIMGPLUGIN=$SOFA_PLUGIN_CIMG",
  "-DPLUGIN_DIFFUSIONSOLVER=$SOFA_PLUGIN_DIFFUSIONSOLVER",
  "-DPLUGIN_GEOMAGIC=$SOFA_PLUGIN_GEOMAGIC",
  "-DPLUGIN_IMAGE=$SOFA_PLUGIN_IMAGE",
  "-DPLUGIN_MULTITHREADING=$SOFA_PLUGIN_MULTITHREADING",
  "-DPLUGIN_SOFACARVING=$SOFA_PLUGIN_CARVING",
  "-DPLUGIN_SOFADISTANCEGRID=$SOFA_PLUGIN_DISTANCEGRID",
  "-DPLUGIN_SOFAEULERIANFLUID=$SOFA_PLUGIN_EULERIANFLUID",
  "-DPLUGIN_SOFAIMPLICITFIELD=$SOFA_PLUGIN_IMPLICITFIELD",
  "-DPLUGIN_COLLISIONOBBCAPSULE=$SOFA_PLUGIN_COLLISIONOBBCAPSULE",
  "-DPLUGIN_VOLUMETRICRENDERING=$SOFA_PLUGIN_VOLUMETRICRENDERING",
  "$SOFA_PLUGIN_BEAMADAPTER_ARGS",
  "$SOFA_PLUGIN_STLIB_ARGS",
  "$SOFA_PLUGIN_SOFTROBOTS_ARGS",
  "$SOFA_PLUGIN_SHAPEMATCHING_ARGS",
  "$SOFA_PLUGIN_CSPARSESOLVERS_ARGS",
  "$SOFA_PLUGIN_MODELORDERREDUCTION_ARGS",
  "$SOFA_PLUGIN_METIS_ARGS",
  "$SOFA_PLUGIN_MANIFOLDTOPOLOGIES_ARGS",
  "$SOFA_PLUGIN_EXAMPLE_ARGS",
  "$SOFA_PLUGIN_REGISTRATION_ARGS",
  "$SOFA_PLUGIN_SPHFLUID_ARGS",
  "$SOFA_PLUGIN_CUDA_ARGS",
  "$SOFA_PLUGIN_PYTHON3_ARGS"
] }
build = { cmd = "cmake --build build --target all --parallel 8", depends-on = ["configure"] }
clean = { cmd = "rm -rf build" }
test = { cmd = "ctest --test-dir build --output-on-failure", depends-on = [
  "build",
] }

[feature.plugin-sofamatrix]
activation = { env = { SOFA_PLUGIN_SOFAMATRIX = "ON" } }

[feature.app-sofaphysics-api]
activation = { env = { SOFA_APPLICATION_SOFAPHYSICSAPI = "ON" } }

[feature.app-sofainfo]
activation = { env = { SOFA_APPLICATION_SOFAINFO = "ON" } }

[feature.plugin-scenecreator]
activation = { env = { SOFA_BUILD_SCENECREATOR = "ON" } }

[feature.gl]
activation = { env = { SOFA_NO_OPENGL = "OFF", SOFA_WITH_OPENGL = "ON" } }
dependencies = { glew = "*" }

[feature.gl.target.linux]
dependencies = { libglu = "*" }

[feature.gl.target.linux-64.dependencies]
mesa-libgl-devel-cos7-x86_64 = "*"

[feature.qt-gui]
activation = { env = { SOFA_PLUGIN_SOFA_GUI_QT = "ON", Qt5_DIR = "$CONDA_PREFIX/lib/cmake" } }
[feature.qt-gui.dependencies]
qt-main = ">=5.15.0"
ffmpeg = "*"
libqglviewer = "*"

[feature.tutorials]
activation = { env = { SOFA_BUILD_TUTORIALS = "ON" } }

[feature.dump-visitor-info]
activation = { env = { SOFA_DUMP_VISITOR_INFO = "ON" } }

[feature.dev-tools]
activation = { env = { SOFA_WITH_DEVTOOLS = "ON" } }

[feature.build-release-package]
activation = { env = { SOFA_BUILD_RELEASE_PACKAGE = "ON" } }

# TODO: probably specialize python env vars on windows here
[feature.plugin-sofa-python3]
activation = { env = { SOFA_PLUGIN_PYTHON3_ARGS = "-DPLUGIN_SOFAPYTHON3=ON -DSOFA_FETCH_SOFAPYTHON3=ON -DPython_EXECUTABLE=$CONDA_PREFIX/bin/python" , pybind11_DIR = "$CONDA_PREFIX/share/cmake" } }
dependencies = { numpy = ">=1.22.0", python = ">=3.9.0", pybind11 = ">=2.3.0" }

[feature.py39.dependencies]
python = "3.9.*"

[feature.py310.dependencies]
python = "3.10.*"

[feature.py311.dependencies]
python = "3.11.*"

[feature.py312.dependencies]
python = "3.12.*"

[feature.py313.dependencies]
python = "3.13.*"

# TODO : DPLUGIN_MANUALMAPPING -> deprecated ?
# TODO : PLUGIN_THMPGSPATIALHASHING -> deprecated ?

[feature.plugin-cimg]
activation = { env = { SOFA_PLUGIN_CIMG = "ON" } }

[feature.plugin-beamadapter]
activation = { env = { SOFA_PLUGIN_BEAMADAPTER_ARGS = "-DPLUGIN_BEAMADAPTER=ON -DSOFA_FETCH_BEAMADAPTER=ON" } }

[feature.plugin-stlib]
activation = { env = { SOFA_PLUGIN_STLIB_ARGS = "-DPLUGIN_STLIB=ON -DSOFA_FETCH_STLIB=ON" } }

[feature.plugin-softrobots]
activation = { env = { SOFA_PLUGIN_SOFTROBOTS_ARGS = "-DPLUGIN_SOFTROBOTS=ON -DSOFA_FETCH_SOFTROBOTS=ON" } }

[feature.plugin-shapematching]
activation = { env = { SOFA_PLUGIN_SHAPEMATCHING_ARGS = "-DPLUGIN_SHAPEMATCHINGPLUGIN=ON -DSOFA_FETCH_SHAPEMATCHINGPLUGIN=ON" } }

[feature.plugin-csparsesolvers]
activation = { env = { SOFA_PLUGIN_CSPARSESOLVERS_ARGS = "-DPLUGIN_CSPARSESOLVERS=ON -DSOFA_FETCH_CSPARSESOLVERS=ON" } }

[feature.plugin-modelorderreduction]
activation = { env = { SOFA_PLUGIN_MODELORDERREDUCTION_ARGS = "-DPLUGIN_MODELORDERREDUCTION=ON -DSOFA_FETCH_MODELORDERREDUCTION=ON" } }

[feature.plugin-metis]
activation = { env = { SOFA_PLUGIN_METIS_ARGS = "-DPLUGIN_SOFA_METIS=ON -DSOFA_FETCH_SOFA.METIS=ON" } }

[feature.plugin-diffusionsolver]
activation = { env = { SOFA_PLUGIN_DIFFUSIONSOLVER = "ON" } }

[feature.plugin-geomagic]
activation = { env = { SOFA_PLUGIN_GEOMAGIC = "ON" } }

[feature.plugin-image]
activation = { env = { SOFA_PLUGIN_IMAGE = "ON" } }

[feature.plugin-manifoldtopologies]
activation = { env = { SOFA_PLUGIN_MANIFOLDTOPOLOGIES_ARGS = "-DPLUGIN_MANIFOLDTOPOLOGIES=ON -DSOFA_FETCH_MANIFOLDTOPOLOGIES=ON" } }

[feature.plugin-multithreading]
activation = { env = { SOFA_PLUGIN_MULTITHREADING = "ON" } }

[feature.plugin-example]
activation = { env = { SOFA_PLUGIN_EXAMPLE_ARGS = "-DPLUGIN_PLUGINEXAMPLE=ON -DSOFA_FETCH_PLUGINEXAMPLE=ON" } }

[feature.plugin-registration]
activation = { env = { SOFA_PLUGIN_REGISTRATION_ARGS = "-DPLUGIN_REGISTRATION=ON -DSOFA_FETCH_REGISTRATION=ON" } }

[feature.plugin-carving]
activation = { env = { SOFA_PLUGIN_CARVING = "ON" } }

[feature.plugin-distancegrid]
activation = { env = { SOFA_PLUGIN_DISTANCEGRID = "ON" } }

[feature.plugin-eulerianfuild]
activation = { env = { SOFA_PLUGIN_EULERIANFLUID = "ON" } }

[feature.plugin-implicitfield]
activation = { env = { SOFA_PLUGIN_IMPLICITFIELD = "ON" } }

[feature.plugin-sphfluid]
activation = { env = { SOFA_PLUGIN_SPHFLUID_ARGS = "-DPLUGIN_SOFASPHFLUID=ON -DSOFA_FETCH_SOFASPHFLUID=ON" } }

[feature.plugin-collisionobbcapsule]
activation = { env = { SOFA_PLUGIN_COLLISIONOBBCAPSULE = "ON" } }

[feature.plugin-volumetricrendering]
activation = { env = { SOFA_PLUGIN_VOLUMETRICRENDERING = "ON" } }

[feature.cuda]
platforms = ["linux-64", "win-64"]
activation = { env = { SOFA_PLUGIN_CUDA_ARGS = "-DPLUGIN_SOFACUDA=ON -DSOFACUDA_DOUBLE=ON" } }
system-requirements = { cuda = "12.1" }
dependencies = { cudatoolkit = "*"}

# TODO: add run-regression-tests feature

# TODO: add build-release-package feature

[environments]
minimal-scope = { features = ["dev-tools"], solve-group = "minimal-scope" }
standard-scope = { features = [
  "dev-tools",
  "plugin-sofamatrix",
  "app-sofaphysics-api",
  "tutorials",
  "gl",
  "qt-gui",
  "dump-visitor-info",
  "plugin-sofa-python3"
  ], solve-group = "minimal-scope" }

# TODO : SOFAGUI_HEADLESS_RECORDER ?
# TODO : SOFAGUIQT_ENABLE_NODEGRAPH ?
# TODO : PLUGIN_BULLETCOLLISIONDETECTION ?
# TODO : PLUGIN_CGALPLUGIN ?
# TODO : Assimp ?
# TODO : DPLUGIN_SOFAGLFW ?
# TODO : DPLUGIN_SOFAIMGUI ?

full-scope = { features = [
  "dev-tools",
  "plugin-sofamatrix",
  "app-sofaphysics-api",
  "tutorials",
  "gl",
  "qt-gui",
  "dump-visitor-info",
  "plugin-sofa-python3",
  "plugin-cimg",
  "plugin-beamadapter",
  "plugin-stlib",
  "plugin-softrobots",
  "plugin-shapematching",
  "plugin-csparsesolvers",
  "plugin-modelorderreduction",
  "plugin-metis",
  "plugin-diffusionsolver",
  "plugin-geomagic",
  "plugin-image",
  "plugin-manifoldtopologies",
  "plugin-multithreading",
  "plugin-example",
  "plugin-registration",
  "plugin-carving",
  "plugin-distancegrid",
  "plugin-eulerianfuild",
  "plugin-implicitfield",
  "plugin-sphfluid",
  "plugin-collisionobbcapsule",
  "plugin-volumetricrendering"
  ], solve-group = "minimal-scope" }

  full-scope-cuda = { features = [
  "dev-tools",
  "plugin-sofamatrix",
  "app-sofaphysics-api",
  "tutorials",
  "gl",
  "qt-gui",
  "dump-visitor-info",
  "plugin-sofa-python3",
  "plugin-cimg",
  "plugin-beamadapter",
  "plugin-stlib",
  "plugin-softrobots",
  "plugin-shapematching",
  "plugin-csparsesolvers",
  "plugin-modelorderreduction",
  "plugin-metis",
  "plugin-diffusionsolver",
  "plugin-geomagic",
  "plugin-image",
  "plugin-manifoldtopologies",
  "plugin-multithreading",
  "plugin-example",
  "plugin-registration",
  "plugin-carving",
  "plugin-distancegrid",
  "plugin-eulerianfuild",
  "plugin-implicitfield",
  "plugin-sphfluid",
  "plugin-collisionobbcapsule",
  "plugin-volumetricrendering",
  "cuda"
  ], solve-group = "minimal-scope" }